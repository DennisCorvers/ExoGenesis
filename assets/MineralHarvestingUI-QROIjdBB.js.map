{"version":3,"file":"MineralHarvestingUI-QROIjdBB.js","sources":["../../src/modules/common/ProgressBar.tsx","../../src/modules/common/ResourceNodeCard.tsx","../../src/hooks/EventSubscription.tsx","../../src/modules/mineralharvesting/MineralHarvestingUI.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport './ProgressBar.css'\r\n\r\ninterface ProgressBarProps {\r\n  elapsedTime: number;\r\n  totalTime: number;\r\n  enableProgressBars: boolean;\r\n}\r\n\r\nconst ProgressBar: React.FC<ProgressBarProps> = ({ elapsedTime, totalTime, enableProgressBars }) => {\r\n  const innerBarRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!enableProgressBars || !innerBarRef.current) return;\r\n\r\n    const delay = -elapsedTime;\r\n    const duration = totalTime;\r\n\r\n    innerBarRef.current.style.animation = 'none';\r\n    void innerBarRef.current.offsetHeight;\r\n\r\n    innerBarRef.current.style.animation = `${duration}s linear ${delay}s 1 progressBar`;\r\n}, [elapsedTime, totalTime, enableProgressBars]);\r\n\r\n  return (\r\n    <div className=\"progress-bar-container\">\r\n      <div\r\n        ref={innerBarRef}\r\n        className=\"inner-bar\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from 'react';\r\nimport { SimpleHarvestRecipe } from '@game/skills/requirements/SimpleHarvestRecipe';\r\nimport './ResourceNodeCard.css';\r\n\r\ninterface ResourceNodeCardProps {\r\n  node: SimpleHarvestRecipe;\r\n  onClick: (node: SimpleHarvestRecipe) => void;\r\n}\r\n\r\nconst ResourceNodeCard: React.FC<ResourceNodeCardProps> = ({ node, onClick }) => {\r\n  return (\r\n    <div className=\"resource-node-card\" onClick={() => onClick(node)}>\r\n      <h3>{node.displayName}</h3>\r\n      <p>Experience Reward: {node.experienceReward}</p>\r\n      <p>Level Requirement: {node.levelRequirement}</p>\r\n      <p>Harvesting Time: {node.actionTime} seconds</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResourceNodeCard;\r\n","import { useEffect } from \"react\";\r\nimport { EventBus } from \"@game/events/EventBus\";\r\n\r\nexport const useEventSubscription = (eventType: string, handler: (event: any) => void) => {\r\n    useEffect(() => {\r\n        EventBus.instance.subscribe(eventType, handler);\r\n        return () => {\r\n            EventBus.instance.unsubscribe(eventType, handler);\r\n        };\r\n    }, [eventType, handler]);\r\n};\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { GameContext } from '@game/core/GameContext';\r\nimport ProgressBar from '../common/ProgressBar';\r\nimport ResourceNodeCard from '../common/ResourceNodeCard';\r\nimport { BaseRecipe } from '@game/skills/requirements/BaseRecipe';\r\nimport { MineralHarvestingState } from '@game/state/MineralHarvestingState';\r\nimport { ActionEvent } from '@game/events/skill/ActionEvent';\r\nimport { ActionStoppedEvent } from '@game/events/skill/ActionStoppedEvent';\r\nimport { useEventSubscription } from '../../hooks/EventSubscription'\r\nimport { SimpleHarvestRecipe } from '@game/skills/requirements/SimpleHarvestRecipe';\r\nimport './MineralHarvestingUI.css'\r\n\r\ninterface MineralHarvestingUIProps {\r\n    gameContext: GameContext;\r\n}\r\n\r\nconst MineralHarvestingUI: React.FC<MineralHarvestingUIProps> = ({ gameContext }) => {\r\n    const [actionTime, setActionTime] = useState(0)\r\n    const [progress, setProgress] = useState(0);\r\n    const [currentNode, setCurrentNode] = useState<BaseRecipe | null>(null);\r\n\r\n    const skill = gameContext.skills.mineralHarvesting;\r\n    const player = gameContext.player;\r\n    const skillState = player.skillManager.getSkillState(skill) as MineralHarvestingState;\r\n    const skillManager = player.skillManager;\r\n\r\n    const onAction = useCallback((event: ActionEvent) => {\r\n        updateHarvestProgress(event.action as SimpleHarvestRecipe);\r\n    }, []);\r\n\r\n    const onStop = useCallback((event: ActionStoppedEvent) => {\r\n        updateHarvestProgress(event.action as SimpleHarvestRecipe)\r\n    }, []);\r\n\r\n    const handleNodeClick = useCallback((node: SimpleHarvestRecipe) => {\r\n        // If the chosen action is running, stop the action, otherwise switch / start\r\n        if (skillState.isRunningAction(node)) {\r\n            skillManager.stopPlayerAction(skill, node);\r\n        }\r\n        else {\r\n            skillManager.startPlayerAction(skill, node);\r\n        }\r\n\r\n        updateHarvestProgress(node);\r\n    }, []);\r\n\r\n    const updateHarvestProgress = useCallback((action: SimpleHarvestRecipe) => {\r\n        const nodeTime = skillState.isActive ? action.actionTime : 0;\r\n        setCurrentNode(skillState.activeAction);\r\n        setProgress(skillState.progress)\r\n        setActionTime(nodeTime);\r\n    }, []);\r\n\r\n    useEventSubscription(`${skill.id}.actionComplete`, onAction);\r\n    useEventSubscription(`${skill.id}.actionStopped`, onStop);\r\n\r\n    useEffect(() => {\r\n        // Set the progress of the node, in case we are already harvesting\r\n        if (skillState.isActive)\r\n            updateHarvestProgress(skillState.activeAction!);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"mining-ui\">\r\n            {currentNode && (\r\n                <div className=\"node-details\">\r\n                    <h2>Current Node: {currentNode.displayName}</h2>\r\n                    <p>Experience: {currentNode.experienceReward}</p>\r\n                    <p>Harvesting Time: {currentNode.actionTime} seconds</p>\r\n                    <p>Level Requirement: {currentNode.levelRequirement}</p>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"progress-bar\" style={{ marginTop: '20px', maxWidth: '300px' }}>\r\n                <h3>Mining Progress</h3>\r\n                <ProgressBar\r\n                    elapsedTime={progress}\r\n                    totalTime={actionTime}\r\n                    enableProgressBars={true}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"node-container\">\r\n                {skill.registeredNodes\r\n                    .map((node) => (\r\n                        <div key={node.uid} className='col-6 col-md-4 col-lg-4 col-xl-3'>\r\n                            <ResourceNodeCard key={node.uid} node={node} onClick={handleNodeClick} />\r\n                        </div>\r\n                    ))}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MineralHarvestingUI;\r\n"],"names":["useRef","useEffect","jsx","jsxs","useState","useCallback"],"mappings":"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"}